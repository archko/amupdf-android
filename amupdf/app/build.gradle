apply plugin: 'com.android.application'
import cn.archko.plugin.*

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-allopen'

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        release {
            v1SigningEnabled true
            v2SigningEnabled true
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion BuildConfig.compileSdkVersion
    buildToolsVersion BuildConfig.buildToolsVersion

    defaultConfig {
        applicationId 'cn.archko.mupdf'
        minSdkVersion BuildConfig.minSdkVersion
        targetSdkVersion BuildConfig.targetSdkVersion
        versionCode BuildConfig.versionCode
        versionName BuildConfig.versionName
        multiDexEnabled true
        signingConfig signingConfigs.release
        ndk.abiFilters 'armeabi-v7a', 'arm64-v8a'

        vectorDrawables {
            /*
             *  Do not generate pngs from vector drawable resources.
             *
             *  The vector drawables  can now be used directly on all
             *  platforms we support.
             */
            useSupportLibrary = true
        }
    }

    //dataBinding {
    //    enabled = true
    //}
    compileOptions {
        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
            minifyEnabled false
            jniDebuggable true
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions { abortOnError false }

    sourceSets {
        main {
            jni.srcDirs = []
            jniLibs.srcDirs = ['libs']
            java {
                srcDirs 'src/main/kotlin'
            }
        }
    }
}
dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    api Arch.runtime
    api AndroidX.activityKtx
    api AndroidX.appCompat
    api AndroidX.coreKtx
    api Fragment.runtime
    api Fragment.runtimeKtx
    api Lifecycle.runtime
    api Lifecycle.viewmodel
    api Lifecycle.viewmodelKtx
    api Lifecycle.livedataKtx
    api Lifecycle.extensions
    api Coroutines.android

    api Kotlin.stdlibJdk8

    api Dependency.liveEventBusX

    api Umeng.analytics
    api Umeng.umengCommon
    api AndroidX.multidex
    api AndroidX.constraintLayout
    api AndroidX.constraintLayoutSolver
    implementation(Dependency.material) {
        exclude group: 'androidx.recyclerview'
    }

    api project(':reader')
    api project(':editor')
    api project(':library')
}