apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-allopen'

apply from: '../shared.gradle'

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        release {
            v1SigningEnabled true
            v2SigningEnabled true
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion build_versions.compile_sdk
    buildToolsVersion build_versions.build_tools
    defaultConfig {
        applicationId 'cn.archko.mupdf'
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode VERSION_CODE as int
        versionName VERSION_NAME
        signingConfig signingConfigs.release
        ndk.abiFilters 'armeabi-v7a', 'arm64-v8a'

        vectorDrawables {
            /*
             *  Do not generate pngs from vector drawable resources.
             *
             *  The vector drawables  can now be used directly on all
             *  platforms we support.
             */
            useSupportLibrary = true
        }
    }

    //dataBinding {
    //    enabled = true
    //}
    compileOptions {
        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
            minifyEnabled false
            jniDebuggable true
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions { abortOnError false }
    sourceSets {
        main {
            jni.srcDirs = []
            jniLibs.srcDirs = ['libs']
            main.java.srcDirs += 'src/main/kotlin'
        }
    }
}
dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    api deps.multidex
    api deps.constraint_layout
    api deps.constraintlayout_solver

    api project(':reader')
}